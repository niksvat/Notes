Total 7 types of data type:
1. Number
2. string
3. boolean
4. null
5. undefined
6. Symbol (NaN, Infinity, -Infinity) (create symbol type var x = Symbol('This is test'))
7. Object

number+string = string (parseInt)

Function
----------------------------
- Bydefault, function returns undefined.
- Function expression : 
  function(){
  }
- Named function expression:
  function hello(){
  }
- IIFE (Immediately invoked function expression)



var, let, const
----------------------------
- var has function scope
- let, const has block scope


if else
----------------------------
console.log(1 == 1);            => true 
console.log(1 == "1");          => true
console.log('1' == 1);          => true 
console.log(0 == false);        => true
console.log(0 == null);         => false
console.log(0 == undefined);    => false
console.log(null == undefined); => true 

=== -> strict equality

Falsy

  - false
  - undefined
  - null
  - 0
  - NaN
  - "" (i.e., the empty string)

Switch
---------------------


    switch (n) {
        case 2:
            console.log("A");
        case 3:
            console.log("B");
        case 4:
            console.log("C");
        case 5:
            console.log("D");
        default:
            console.log("E");
    }
    
    switch(4) => C,D,E so break in required.



loops
-------------------------------------

let a = ['a','b','c','d','e'];
for(let x in a){
  console.log(x);
}
// 0,1,2,3,4,5

for(let x of a){
  console.log(x);
}
// a,b,c,d,e


try-catch-finally
--------------------------------------
- return from 'catch' or 'try' then finally will execute always
- throw new Error('custom message');




Object
--------------------------------------
- attributes and behaviour
- notations: object.propertyname or object['propertyname']
- creations:
  objects can be created via
    -Object initialzers  
      * Object.create()
      * 'new' keyworkd
      * Object literals
    - constructor function
      
************************************
var x = {
    a: 5, 
    foo: function() {
        return this.a * this.a;
    }
};

var o = Object.create(x);
************************************

var o = new Object();

o.a = 4;
o.b = 'Rome';
o.c = true;
************************************
//intiatilzer
var p = {
    a: 3, 
    b: 'Rome', 
    c: false
};
************************************
// constructor functions
function Actor(firstName, lastName, Age) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.Age = Age;
}

var a1 = new Actor('Julia', 'Roberts', 48);
var a2 = new Actor('Kate', 'Winslet', 40);
************************************
       







