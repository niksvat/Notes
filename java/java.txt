
General
---------------------------------------------------
OOPS - Abstraction, Encapsulation, Inheritance, and Polymorphism
SOLID Design Principals -  single responsibility principle, open-closed principle, Liskov substitution principle, interface segregation principle, and dependency inversion principle
(https://www.bmc.com/blogs/solid-design-principles/#:~:text=SOLID%20is%20an%20acronym%20that,some%20important%20benefits%20for%20developers.)


 ---------------------------------------------------------------
 -countdownlatch
- @Profile to dynamically activate profile in class
- differnece between supplier and consumers in java stream lambda function
  java 8 supplier, https://stackoverflow.com/questions/40244571/when-we-should-use-supplier-in-java-8
  

- Spring Proxy versus 
   proxy concept
 
- Differnence between dependency inversion and dependency injection.
https://medium.com/ssense-tech/dependency-injection-vs-dependency-inversion-vs-inversion-of-control-lets-set-the-record-straight-5dc818dc32d1#:~:text=The%20Inversion%20of%20Control%20is,dependencies%20to%20an%20application's%20class.

- Dynamic proxy using reflection API
 -CAP theorem, Example of liking the post and count the likes etc 
 --------------------------Spring transactions-------------------
 

- Transactional in hibernate (very imp) [ @RetentionPolicy,  ]
- Propagation (https://www.javainuse.com/spring/boot-transaction-propagation)

	Transaction propogation only applies when we are calling another class instance method. If same instance
	method is called, then due to Spring AOP proxy, it won't be able to surround that particular method so its not
	really considered as separate method call from transaction perspective (Even if transaction annotation is there)

- Readonly, rollbackFor, norollbackFor
  If present in try catch block, and rollbackFor is used then transaction will not roll back, cause it is catched inside the funciton hence, function doesn't know that if raised.
  
- Transaction Isolation 
- Spring transaction events (Transaction Synchronization) Use, Transaciton Event lIsterner and Transaction event publisher
	https://dzone.com/articles/transaction-synchronization-and-spring-application
	
	
- oneToManyMapping and manytoonemapping in jpa (https://stackoverflow.com/questions/16408546/hibernate-one-to-many-single-direction)
- oneToMany (https://vladmihalcea.com/the-best-way-to-map-a-onetomany-association-with-jpa-and-hibernate/)
- Mappings (https://medium.com/@rajibrath20/the-best-way-to-map-a-onetomany-relationship-with-jpa-and-hibernate-dbbf6dba00d3)


- Bean wiring with factory pattern: If there is any change lets say in GET API having region as parameter and lets say in future there might be new region that could been added here, how to code that to minimze future code edits

- java 8 consumer, supplier, functions, predicate 
- diff between volatile and transient
- diff between @component and @bean (https://codeboje.de/difference-spring-bean-component/)
- Microservices design pattern ]
  2 phase commit: https://developers.redhat.com/blog/2018/10/01/patterns-for-distributed-transactions-within-a-microservices-architecture/
  SAGA: https://microservices.io/patterns/data/saga.html
- Singletone pattern with lazy intialization and threadsafe with cloning protect
- Reentrant lock
- Deep Copy and shallow copy 
- Functional API JAVA and operations over Collections with collectors
- Parllel streams\

- OpenAPI Specification
- Status sent back on delete api
- Diff put and patch http method
- How to configure swagger
- If A -> B then C and something bad happen in C call, then how to rollback the transaction (https://medium.com/swlh/handling-transactions-in-the-microservice-world-c77b275813e0)

- Optimistic and pessimistic approach - cache, banking when two separate transaction happen | distributed locking
- spring 5 new feature
- how java garbage collector works : Avoid memory leakage https://www.baeldung.com/java-memory-leaks#:~:text=A%20Memory%20Leak%20is%20a,degrades%20system%20performance%20over%20time.

- avoid race condition in java
	event sourcing 
- annotation processing in java, how to implements dependency injection without using spring
- Spring transactions synchonization
  if in current function is synchronized and we are calling an api, then in order to how to avoid dirty read

