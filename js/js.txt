Introduction
---------------
- ECMA
ECMA 5  -> ECMA 6
var    |   let, const etc

ECMA 6 = Major upgrade around 2015-16

- <script src="/path" defer> vs <script src="/path" async>
  - defer: script will be downloaded in parallel to parsing HTML but executed after whole file is downloaded (HTML)
  - async: scripts will be downloaded and executed asap

- "use strict" 
- Event loop, stack, heap memory management, JS is single threaded but it oflload events task to browser and browser when find stack empty push from queue to execute the JS method callbacks.

Total 7 types of data type:
1. Number
2. string
3. boolean
4. null
5. undefined
6. Symbol (NaN is type of number, Infinity, -Infinity) (create symbol type var x = Symbol('This is test'))
7. Object

number + string = string (parseInt)

Function
----------------------------
- By default, function returns undefined.
- Function expression : hoisted and can't be called before the declaration.
  const x = function(){
  }
- Named function Declaration: : hoisted, can be called before the declaration.
 function hello(){
  }
- IIFE (Immediately invoked function expression)
  Example:
          (async () => {
              await main();
          })();

- factory function & clousre

let multiplier = 1.1;

function createTaxCalculator(tax) {
  function calculateTax(amount) {
    console.log(multiplier);
    return amount * tax * multiplier;
  }

  return calculateTax;
}

const calculateVatAmount = createTaxCalculator(0.19);
const calculateIncomeTaxAmount = createTaxCalculator(0.25);

// multiplier = 1.2;

console.log(calculateVatAmount(100));
console.log(calculateVatAmount(200));




var, let, const
----------------------------
- var has function scope
- let, const has block scope
- var is hoisted, let & const are not hoisted

if else
----------------------------
console.log(1 == 1);            => true 
console.log(1 == "1");          => true
console.log('1' == 1);          => true 
console.log(0 == false);        => true
console.log(0 == null);         => false
console.log(0 == undefined);    => false
console.log(null == undefined); => true 

=== -> strict equality

Falsy

  - false
  - undefined
  - null
  - 0
  - NaN
  - "" (i.e., the empty string)

Switch
---------------------


    switch (n) {
        case 2:
            console.log("A");
        case 3:
            console.log("B");
        case 4:
            console.log("C");
        case 5:
            console.log("D");
        default:
            console.log("E");
    }
    
    switch(4) => C,D,E so break in required.



loops
-------------------------------------

let a = ['a','b','c','d','e'];
for(let x in a){
  console.log(x);
}
// 0,1,2,3,4,5

for(let x of a){
  console.log(x);
}
// a,b,c,d,e

const arr = ['a', 'b', 'c', 'd'];

arr.forEach((value, index, array) => {
    console.log('index', index, 'has a value of', value,
    'which correlates to array[' + index + ']:', array[index]);
});


try-catch-finally
--------------------------------------
- return from 'catch' or 'try' then finally will execute always
- throw new Error('custom message');
- or 
  throw {message: "Something"}

Spread operator
---------------

const arr1 = [1, 2, 3]
const arr2 = [...arr1] // spread elements of arr1
Math.min(...arr2) => will give min element from arr

const obj = {
  info: 'something',
  name: 'something'
}

const obj2 = {...ojb} // new object with values copied from previous

Array and object restructuring:
-------------------------------

const [first, sec] = [1, 2, 3] //first -> 1

const obj = {

  info: 'something',
  name: 'something'

}
const {info} = obj; // info refers to obj's info





Object
--------------------------------------
- attributes and behaviour
- notations: object.propertyname or object['propertyname']
- creations:
  objects can be created via
    -Object initialzers  
      * Object.create()
      * 'new' keyworkd
      * Object literals
    - constructor function
      
************************************
var x = {
    a: 5, 
    foo: function() {
        return this.a * this.a;
    }
};

var o = Object.create(x);
************************************

var o = new Object();

o.a = 4;
o.b = 'Rome';
o.c = true;
************************************
//intiatilzer
var p = {
    a: 3, 
    b: 'Rome', 
    c: false
};
************************************
// constructor functions
function Actor(firstName, lastName, Age) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.Age = Age;
}

var a1 = new Actor('Julia', 'Roberts', 48);
var a2 = new Actor('Kate', 'Winslet', 40);
************************************

Internal property, getter and setters

_title => Psuedo private field, means its just convention but it can be accessed
#title => this is private property and can't be accessed. (new concept)

const obj = {
  set title(val) {
    this._title = val;   //triggered when obj.title = 'something';
  },
  get title() {
    return this._title; //triggered when console.log(obj.title);
  }
}

Object.assign
***************

const newObj = Object.assign({}, obj); //copy but not shallow

bind, call, apply (this)
******************

  function something() {
    console.log(this);
  }

bind
 - something.bind(object) // it won't execute function something

call
- something.call(object, , , , )

apply
- something.apply(object, [,,,])

this will now refers to object in something

this & arrow function
*********************

function() {
  console.log(this); //-> this refers to something that call this function
}

() => {
console.log(this) //->refers to this just outside of this arrow function 
}

Example 1:
const team = {
  name: "something",
  people: ["a", "b"],
  getname() {
    this.people.forEach(p => {
      console.log(p + " " + this.name); // this works
    });
  }
}

const team = {
  name: "something",
  people: ["a", "b"],
  getname() {
    this.people.forEach(function(p){
      console.log(p + " " + this.name);  // this.name is undefined since, this will refer to window object.
    });
  }
}

Example 2:

const person = { 
    name: 'Max',
    greet: () => {
        console.log(this.name); // however this refers to global object 'window' (even in strict mode)
    }
};
 
person.greet(); 

*************************************************** CLASSES ***************************************************
(https://www.hackerrank.com/challenges/js10-class/topics)

=> Using constructor functions
-------------------------------------
function Fruit (type) {
    this.type = type;
    this.color = 'unknown';
    this.getInformation = getFruitInformation;
}

function getFruitInformation() {
    return 'This ' + this.type + ' is ' + this.color + '.';
}

let lime = new Fruit('Mexican lime');
console.log(lime.getInformation());



=> Using internal functions defination
---------------------------------------
function Fruit (type) {
    this.type = type;
    this.color = 'unknown';
    this.getInformation = function() {
        return 'This ' + this.type + ' is ' + this.color + '.';
    }
}

let lime = new Fruit('Mexican lime');
console.log(lime.getInformation());

NOTE: Here function is created everytime we create new object

=> Prototype
---------------------------------------
- Every function in js has prototype property, which act as blueprint of object for this function. This is used in inheritance.
- Each object has prototype and this is basically act as fallback object. There is prototype chain, and js use it to connect objects internally. (__proto__)
JS keep checking prototype to find method in chain

function Fruit (type) {
    this.type = type;
    this.color = 'unknown';
}

Fruit.prototype.getInformation = function(){
  return 'This ' + this.type + ' is ' + this.color + '.';
}

=> Using object literals
----------------------------------------
let x = {
  a: 1,
  b: function() {
         return 'aaaa';
     }
}

console.log(x.a);


=> Using class keyword (syntatic sugar)
--------------------------------------
- This is not hoisted while functions declarations are hoisted.

class Polygon {
    constructor(height, width) {
        this.height = height;
        this.width = width;
    }
}

let p = new Polygon(1, 2);

    * Unnamed class
       let a =  class {
          constructor(par){
            this.par = par;
          }
       } 

    * Named class 
      let a = class polygon{
        //todo
      }

- constructor is only one special method, called once when object is created and use for intitalization
- To implement inheritance, super keyword is used, to call parent class constructor.

- Static methods (methods relevant to all object of classes)
---------------------------------------------------------------------

class Point {
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
    static distance(a, b) {
        const dx = a.x - b.x;
        const dy = a.y - b.y;
        return Math.sqrt(dx * dx + dy * dy);
    }
}

const p1 = new Point(5, 5);

- Inheritance
-------------------------------------------------------------------
- inheritance is supported using extends keyword
- We can also extends functional classes
- child override parent function


class Animal {
    constructor(name) {
        this.animalType = 'Animal'
        this.name = name;
    }
    type() {
        console.log(this.name, 'is type', this.animalType);
    }
    speak() {
        console.log(this.name, 'speaks.');
    }
}

class Dog extends Animal {
    constructor(name, collarColor) {
        super(name);
        this.animalType = 'Dog';
        this.collarColor = collarColor;
    }
    speak() {
        console.log(this.name, 'barks.');
    }
    collar() {
        console.log(this.name, 'has a', this.collarColor, 'collar.');
    }
}

let spot = new Dog('Spot', 'red');
spot.type();   //spot is type of dog.
spot.speak();  //spot barks.
spot.collar(); //spot has red collar.


Promises
--------
- To avoid callback hell, promises were introduced.
- Let say after button click we have to fetch user location and after fetching user location, add 2 sec delay and then print the location.

button.addEventListener('click', trackUserHandler);
function trackUserHandler() {
  navigator.geolocation.getCurrentPosition((data) => {
    setTimeout(() => {
      console.log(data);
    }, 200);
  }, error => {
    console.log(error);
  });
}

this function is wrapped in callbacks, we can use promise

const setTimer = duration => {
  const promise = new Promise((resolve, reject) => { //arrow function inside Promise argument executed immediately
    setTimeout(() => {
      resolve('DONE');
    } , duration);
  });
  return promise;
};

function trackUserHandler() {
  navigator.geolocation.getCurrentlocation((data) => {
    setTimer(2000).then(status => {
      console.log(status + ":"+ data);  //DONE:{data}   done comes from previous resolve.
    }, promiseError => {
      console.log(promiseError);
    })
  }, error => {
    console.log(error);
  });
}

OR

function trackUserHandler() {
  navigator.geolocation.getCurrentlocation((data) => {
    setTimer(2000).then(status => {
      console.log(status + ":"+ data);  //DONE:{data}   done comes from previous resolve.
    }).then(error => {
      console.log(error);
    })
  }, error => {
    console.log(error);
  });
}

Promise chaining
----------------
Promise can be in PENDING or FULFILLED or REJECTED state.
If you return something inside catch, and then use then(), it will become again in PENDING state.

.then(1)
.then(2)
.error()    //if error occur in 1, 2 will be skipped and this error will return new promise and hence 3 will continue;
.then(3)
.then(4)
.error()    // promise will be resolved at last level.

 - you can return either new promise inside then or just data. If data is returned, it will be wrapped in promise.


const promise = new Promise((resolve, reject) => {
  getSomething((data) => {
    resolve(data);   //here if data is fetched new promise is returned with data as argument hence you can use then and get the data.
  }, error => {
    reject(error)    //here if data is fetched new promise is returned with error as argument hence you can use catch and get the data.
  });
});


Working with multiple promise
-----------------------------
Promise.all([one, two]).then(([data1, data2]) => {  
  // this will execute if either all resolved or atleast 1 rejected (if 1 rejected then others will be skipped)
})

Promise.allSettled([one, two]).then(([data1, data2]) => {
  // this will execute irrespective of their status and data1.state => state of promise, data1.data -> data of promise
});

Promise.race([one, two]).then(()=>{
    
}).catch(() => {
  
}) ;
//catch or then execute depend on first promise which is either resolved or rejected


.then()
.catch()
.finally()  // this fill always exectue no matter if resolved or rejected.

async/await
-----------
- async keyword can be added in function 
async function something() {
  try {
    const data1 = await asyncFunction();
    const data2 = await something2WhichReutnrPromise();
  } catch(error) {
    console.log(error);
  }
   something(); // this will be blocked until above resolves.
}
- use await only in front of function that returns promise.
- just fancy way of writing promise, under the hood its not async programming rather this thing will wrap itself in then, catch etc.

Capturing and bubbling phase
----------------------------

Addeventlistener registers things on the bubbling phase, which means the button even will be triggered first then a section event surrounding that button.

JS Modules
------------

<script src = "something" type="module"> </script> // type = module needs to be mentioned (if webpack is used then ignore)
Export

export const something  //named export
export default function() {...} //default export

IMPORT

import func, {something as somethingelse} from './file.js';  //for default func and for name {something}
import * as data from './file.js';
data.something // for bundling named export


- code in module execute once and only once its been loaded

IMPORT LATER
- below will be imported when below line executes may be in listener.

import('./file.js').then(module => {
  const something = new module.ToolTip();
});

- If you want to make anything available at global level, window object can be used (globalThis keyword)
  - In one file set globalThis.something = 'val';
  - In another file, let val = globalThis.something;

Build Tools
-----------
ESLint: 
- You can set up config file in project that will tell which rules to enable.

Webpack: 
- If you start importing files etc, webpack help in combining all js files into 1 big file so that browser will not make separate request to each js file. webpack has its own configuration file, where you can specify entry points, build output etc. 
- Sourcemap is part of webpack that allows you to defer optimization so that you can debug code in browser dev tools.
- You can generate new filename (dynamic filename) whenever you make change in js, so that browser won't use cached files.

Babel: You can transpile code into code which can run on old browser.

Above tools can be installed via npm

Workflow:
---------
DEV: Linting -> Building(webpack) -> reload dev server
PROD: Linting -> Building(webpack) -> compile (bable) -> optimization (like dynamic webpack output file)

Browsersupport
--------------
Polyfills:
- can be added manually, use to for olderbrowser to understand some code like promise
- can be merged with webpack, and now webpack will use polyfill during compilation
- can be merged with webpack and babel together.



